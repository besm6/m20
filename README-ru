Кросс-система программирования для ЭВМ М-20
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Состав системы:
1) CC20 - компилятор языка Си
2) AS20 - ассемблер
3) DIS20 - дизассемблер
4) SIM20 - симулятор процессора
5) LIB20 - библиотека подпрограмм


Симулятор SIM20
~~~~~~~~~~~~~~~
Вызов:
	sim20 [-d] file.m20

Флаг "-d" включает отладочную печать.  Многократное
повторение флага увеличивает подробность диагностической
печати.

Симулятор имитирует работу реального процессора M-20,
упрощая отладку программного обеспечения.
Особенности:
- (todo)

В файле hello.s находится пример тестовой программы для
проверки симулятора.  Для запуска необходимо оттранслировать
файл командой "as20 hello.s" и запустить симулятор командой
"sim20 hello.m20".


Дизассемблер DIS20
~~~~~~~~~~~~~~~~~~
Вызов:
	dis20 file.m20

Дизассемблер печатает содержимое бинарного файла
в виде команд ассемблера.  Формат выдачи:

    <адрес>: <байт1> <байт2> <команда> <аргументы>


Ассемблер AS20
~~~~~~~~~~~~~~
Вызов:
	as20 [-O] [-o outfile.m20] [-l libdir] infile.s ...

Ассемблер транслирует набор входных файлов
в выходной бинарный файл.

Флаг -O включает оптимизацию: устранение недостижимых команд
и избыточных пересылок.

Флаг -l подключает каталог с библиотечными функциями.
По умолчанию подключен каталог /usr/local/lib/m20.

Числа бывают: десятичные, восьмеричные, шестнадцатеричные,
двоичные и символьные константы. Шестнадцатеричные числа начинаются
с префикса "0x" или "0X" и могут содержать цифры или буквы "abcdefABCDEF".
Двоичные числа начинаются с префикса "0b" или
"0B" и могут содержать только цифры "01".
Восьмеричные числа начинаются с цифры "0" и могут содержать только
цифры "01234567".  Десятичные числа начинаются с цифр "123456789".
Символьные константы представляют собой произвольный символ,
заключенный в одиночные кавычки, и обозначают ASCII-код соответствующего
символа.

Для обозначения кодов служебных символов применяются
специальные символьные константы:

	'\a' - символ 007
	'\b' - символ 010
	'\t' - символ 011
	'\n' - символ 012
	'\v' - символ 013
	'\f' - символ 014
	'\r' - символ 015
	'\'' - символ одиночной кавычки
	'\\' - символ бэкслэш

Идентификаторы начинаются с буквы и могут состоять из букв и цифр.

Комментарии начинаются с символов ";" или "#" и продолжаются
до конца строки.

Директива .ЭТО
--------------
Формат:
	имя     .это	значение

Значение должно быть целым числом или выражением.

Директива .ПЕРЕМ
---------------
Формат:
	имя     .перем	размер

В области данных отводится массив указанной длины
(в словах).  Имя обозначает адрес начала массива.

Директива .КОНСТ
----------------
Формат:
	имя     .конст	значение, значение...

Указанный массив значений размещается в конце области данных.
Имя обозначает адрес начала массива.  Значения считаются
словными константами.

Директива .ТЕКСТ
----------------
Формат:
	имя     .текст	"строка"

Текстовая строка преобразуется в кодировку ГОСТ 10859 и размещается
в нескольких словах, дополняясь справа пробелами.
Имя обозначает адрес начала массива.

Директива .АДРЕС
----------------
Формат:
		.адрес    значение

Размещение последующих команд происходит, начиная
с указанного адреса.

Команды ассемблера имеют формат:

	метка:  мнемоника
или
	метка:  мнемоника  операнд
или
	метка:  мнемоника  операнд, регистр
или
	метка:  мнемоника  регистр, операнд
или
	метка:  мнемоника  операнд, бит

Метка может отсутствовать (вместе с двоеточием).

Команды могут иметь ни одного, один или два аргумента.


Выражения
~~~~~~~~~
Операнды команд и директив ".это", ".данные", ".адрес", ".конст"
могут быть произвольными выражениями,
состоящими из чисел, имен, и следующих операций:

    +   сложение
    -   вычитание
    *   умножение
    /   деление
    %   остаток от деления
    &   побитовое "и"
    |   побитовое "или"
    ^   побитовое "исключающее или"
    ~   инвертированное "исключающее или"
    <<  сдвиг влево
    >>  сдвиг вправо

Все операции имеют одинаковый приоритет и выполняются слева направо.
Для изменения порядка выполнения операций применяются скобки "()".
Все операции бинарные (имеют два аргумента).
Левый аргумент может быть опущен, при этом он считается равным нулю
(это имеет смысл только для операций "+" и "~").

В выражениях может применяться специальное имя ".",
обозначающее текущий адрес команды.


Компилятор CC20
~~~~~~~~~~~~~~~
Вызов:
	cc20 file.c

После компиляции образуется файл "file.s" на языке ассемблера.
Особенности компилятора описаны в файле cc/NOTES.

____________________________________________________
Copyright (GPL) 2008 Serge Vakulenko, <serge.vakulenko@gmail.com>
